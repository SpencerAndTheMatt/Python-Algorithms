# Tensor flow programme for linear regression

from __future__ import absolute_import, division, print_function, unicode_literals

# Define imports
import pandas as pd
import tensorflow as tf  # Tensorflow 2.0.0, other versions refused to work on my pc

# Load dataset from the tensorflow link
dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv')  # Training data
dfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv')  # Testing data
y_train = dftrain.pop('survived')
y_eval = dfeval.pop('survived')  # Removes from original dataframe and returns 'survived' column
print(dftrain.loc[0], y_train.loc[0])  # .loc locates row [x]

# dftrain.describe() could be used to find basic info like mean, std, min, max, etc
# dftrain.shape can be used to return (rows, columns)
# dftrain.age.hist(bins = 20); plt.show(); shows a histogram with 20 bins of age

# Forming categorical and numeric columns
CATEGORICAL_COLUMNS = ['sex', 'n_siblings_spouses', 'parch', 'class', 'deck', 'embark_town', 'alone']
NUMERIC_COLUMNS = ['age', 'fare']

# Form feature columns
feature_columns = []
for feature_name in CATEGORICAL_COLUMNS:
    vocabulary = dftrain[feature_name].unique()  # forms list of unique variables from that feature column
    feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))

for feature_name in NUMERIC_COLUMNS:
    feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))


# Putting data into a Dataset usable with the model
def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):
    def input_function():  # Inner function to be returned
        ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # Create tf.data.Dataset object w/ data
        if shuffle:
            ds = ds.shuffle(1000)  # Randomise order of data
        ds = ds.batch(batch_size).repeat(num_epochs)
        return ds  # Return batch of the dataset

    return input_function  # Return a function object for use

# Using the function already written
train_input_fn = make_input_fn(dftrain, y_train)
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)

# Creating the model
linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)  # Create estimator

# Training the model
linear_est.train(train_input_fn)  # train
result = linear_est.evaluate(eval_input_fn)  # Obtain model metrics/stats by testing on test data

# clear_output() #Clear console output
# print(result['accuracy']) #Results variable is a dict of stats about the model
# print(result) #Accuracy is just a comparison of predictions compared to actual data

# Predicting new model
result = list(linear_est.predict(eval_input_fn))
print(result)

# Accessing probability of survival
print(dfeval.loc[0])
print(result[0]['probabilities'][1])
